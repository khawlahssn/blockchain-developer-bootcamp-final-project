{"version":3,"sources":["utils/web3.js","utils/recycle.js","constants.js","App.js","reportWebVitals.js","index.js"],"names":["initWeb3","a","web3","detectEthereumProvider","mustBeMetaMask","provider","console","log","window","ethereum","Web3","on","_chainId","location","reload","_error","contractAddress","abi","listOfMessages","locations","App","recycleContract","useRef","useState","setWeb3","doneCheckingForMetaMask","setDoneCheckingForMetaMask","connected","setConnected","connecting","setConnecting","isRinkebyChain","setIsRinkebyChain","userBalance","setBalance","admin","setAdmin","descp","setDescp","code","setCode","weight","setWeight","addressToReward","setAddress","collector","setCollector","addressToRequestRewardFor","setRequestAddress","weightInputByCollector","setweightInputByCollector","message","setMessage","addingRecyclable","setAddingRecyclable","rewardingUser","setRewardingUser","requestingReward","setRequestingReward","useEffect","cancelled","web3Instance","request","method","current","eth","Contract","length","isConnected","error","handleAccountsChanged","initWeb3WithProvider","methods","owner","call","wasteCollector","checkUserBalance","handler","getAccount","_event","_accounts","handleUserSubmission","event","preventDefault","showMessage","getAccounts","accounts","addRecyclable","Math","round","send","from","handleCollectorSubmission","requestReward","handleAdminSubmission","amountWei","utils","toWei","awardRecycler","value","userAdd","getBalance","balance","balanceInEther","fromWei","msg","className","type","onClick","disabled","selectedAddress","toLowerCase","onSubmit","onChange","target","name","selection","val","showLocation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f49c110.chunk.js","sourcesContent":["import detectEthereumProvider from \"@metamask/detect-provider\";\nimport Web3 from \"web3\";\n\nconst initWeb3 = async () => {\n  let web3 = null;\n\n  // Get the provider, or null if it couldn't be detected.\n  const provider = await detectEthereumProvider({\n    mustBeMetaMask: true,\n  });\n\n  if (provider) {\n    console.log(\"MetaMask Ethereum provider successfully detected!\");\n\n    const { ethereum } = window;\n    web3 = new Web3(provider);\n\n    // Reload the page when the currently connected chain changes.\n    ethereum.on(\"chainChanged\", (_chainId) => {\n      window.location.reload();\n    });\n\n    ethereum.on(\"disconnect\", (_error) => {\n      window.location.reload();\n    });\n  } else {\n    console.log(\"Please install MetaMask!\");\n  }\n\n  return web3;\n};\n\nexport default initWeb3;\n","export const contractAddress = \"0xF6d7133c6f2eCd081542198394594fDfEa1B10b7\";\n\nexport const abi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_collector\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"recycler\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"balanceOfRecipient\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"weightInKG\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"rewardAmount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"enum Recycle.State\",\n        \"name\": \"statusOfRecyclable\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"name\": \"LogRecieved\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"descrp\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"weightInKG\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"enum Recycle.State\",\n        \"name\": \"statusOfRecyclable\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"name\": \"LogRecyclableAdded\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"balanceOfRecipient\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"enum Recycle.State\",\n        \"name\": \"statusOfRecyclable\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"name\": \"LogRewarded\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"previousOwner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"newOwner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"OwnershipTransferred\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"renounceOwnership\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"newOwner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"transferOwnership\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"wasteCollector\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_itemDescription\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_cityCode\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_weight\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"addRecyclable\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_recycler\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_weight\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"requestReward\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_recycler\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"awardRecycler\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\",\n    \"payable\": true\n  }\n];","// const statesOfItems = [\"Processing\", \"Recieved\", \"Rewarded\"];\n\nconst listOfMessages = [\n    \"❌ You MUST fill the required fields!\",\n    \"⏳ Waiting on transaction success...\",\n    \"✅ Your item submission is successful\",\n    \"The weight must be AT LEAST 1 KG!\",\n    \"✅ Your request is successful\",\n    \"✅ Reward has been successfully transfered\"\n  ];\n  \n  const locations = [\"Bee'ah Waste Management Complex, Industrial Area, Sharjah\", \n                     \"Municipality Department, Masfoot Road, Ajman\", \n                     \"Dubai Industrial Park, Sheikh Mohammed Bin Zayed Rd, Dubai\",\n                     \"Tadweer, Delma Street, Abu Dhabi\",\n                     \"Municipality Department, Hamad Bin Abdullah Street, Fujairah\",\n                     \"RAK Waste Management Authority, Al Qusaidat Street, Ras Al Khaimah\",\n                     \"Municipality Department, Sheikh Ahmed Bin Rashid Al Mualla Rd, Umm Al Quwain\"\n                    ];\n  \n  export {listOfMessages, locations};","import { useEffect, useRef, useState } from \"react\";\nimport initWeb3 from \"./utils/web3\";\nimport { abi, contractAddress } from \"./utils/recycle\";\nimport {listOfMessages, locations } from \"./constants\";\nimport \"./App.css\";\n\nconst { ethereum } = window;\n\nfunction App() {\n  const recycleContract = useRef(null);\n  const [web3, setWeb3] = useState(null);\n  const [doneCheckingForMetaMask, setDoneCheckingForMetaMask] = useState(false);\n  const [connected, setConnected] = useState(false);\n  const [connecting, setConnecting] = useState(false);\n  const [isRinkebyChain, setIsRinkebyChain] = useState(false);\n  const [userBalance, setBalance] = useState(\"\");\n\n  const [admin, setAdmin] = useState(\"\");\n  const [descp, setDescp] = useState(\"\");\n  const [code, setCode] = useState(\"\");\n  const [weight, setWeight] = useState(\"\");\n  const [addressToReward, setAddress] = useState(\"\");\n  // const [amountToReward, setAmount] = useState(\"\");\n  const [collector, setCollector] = useState(\"\");\n  const [addressToRequestRewardFor, setRequestAddress] = useState(\"\");\n  const [weightInputByCollector, setweightInputByCollector] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  // const [status, setStatus] = useState(\"...\");\n\n  const [addingRecyclable, setAddingRecyclable] = useState(false);\n  const [rewardingUser, setRewardingUser] = useState(false);\n  const [requestingReward, setRequestingReward] = useState(false);\n\n\n  useEffect(() => {\n    let cancelled = false;\n\n    async function initWeb3WithProvider() {\n      if (web3 === null) {\n        if (!cancelled) {\n          setDoneCheckingForMetaMask(false);\n          const web3Instance = await initWeb3();\n          setWeb3(web3Instance);\n\n          // Transactions done in this app must be done on the Rinkeby test network.\n          const chainId = await ethereum.request({ method: \"eth_chainId\" });\n          if (chainId === \"0x4\") {\n            setIsRinkebyChain(true);\n          }\n\n          setDoneCheckingForMetaMask(true);\n\n          if (web3Instance !== null) {\n            // Create Contract JS object.\n            recycleContract.current = new web3Instance.eth.Contract(\n              abi,\n              contractAddress\n            );\n\n            // Check to see if user is already connected.\n            try {\n              const accounts = await ethereum.request({\n                method: \"eth_accounts\",\n              });\n              if (accounts.length > 0 && ethereum.isConnected()) {\n                setConnected(true);\n              }\n            } catch (error) {\n              console.error(error);\n            }\n\n            // Implement `accountsChanged` event handler.\n            ethereum.on(\"accountsChanged\", handleAccountsChanged);\n          }\n        }\n      }\n    }\n\n    initWeb3WithProvider();\n\n    return () => {\n      cancelled = true;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n\n    if (connected) {\n      async function handler() {\n        const admin = await recycleContract.current.methods.owner().call();\n        const collector = await recycleContract.current.methods\n          .wasteCollector()\n          .call();\n        if (!cancelled) {\n          setAdmin(admin);\n          await checkUserBalance();\n          setCollector(collector);\n        }\n      }\n      handler();\n    }\n\n    return () => {\n      cancelled = true;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connected]);\n\n  const getAccount = async (_event) => {\n    setConnecting(true);\n    try {\n      await ethereum.request({ method: \"eth_requestAccounts\" });\n    } catch (error) {}\n    setConnecting(false);\n  };\n\n  const handleAccountsChanged = (_accounts) => {\n    window.location.reload();\n  };\n\n  /**\n   *\n   * @dev All functions handling form submissions are defined in this section\n   */\n\n  const handleDropdown = (event) => {\n    var selection = event.target.value;\n\n    if (selection === \"DEFAULT\") {\n      setCode(\"\");\n    } else {\n      setCode(event.target.value);\n    }\n  };\n\n  const showLocation = (val) => {\n    switch (val) {\n      case \"SH\":\n        return locations[0];\n      case \"AJ\":\n        return locations[1];\n      case \"DU\":\n        return locations[2];\n      case \"AD\":\n        return locations[3];\n      case \"FU\":\n        return locations[4];\n      case \"RK\":\n        return locations[5];\n      case \"UQ\":\n        return locations[6];\n      default:\n        break;\n    }\n  };\n\n\n  const handleUserSubmission = async (event) => {\n    event.preventDefault();\n\n    if (descp === \"\" || code === \"\" || weight === \"\") {\n      showMessage(listOfMessages[0]);\n    } else if (weight < 1) {\n      showMessage(listOfMessages[3]);\n    } else {\n      setAddingRecyclable(true);\n      const accounts = await web3.eth.getAccounts();\n      showMessage(listOfMessages[1]);\n      await recycleContract.current.methods\n        .addRecyclable(descp, code, Math.round(weight))\n        .send({\n          from: accounts[0],\n        });\n      // var numOfItems = result.events.LogRecyclableAdded.returnValues.itemId;\n      // var statusIndex =\n      //   result.events.LogRecyclableAdded.returnValues.statusOfRecyclable;\n\n      // console.log(\"Testing for: \" + numOfItems + \" / \" + statusIndex);\n\n      // setStatus(statesOfItems[statusIndex]);\n      // showMessage(`✅ You have recycled a total of ${numOfItems} items`);\n      showMessage(listOfMessages[2]);\n      // console.log(statusOfItems);\n\n      setAddingRecyclable(false);\n    }\n  };\n\n  const handleCollectorSubmission = async (event) => {\n    event.preventDefault();\n\n    if (addressToRequestRewardFor === \"\" || weightInputByCollector === \"\") {\n      showMessage(listOfMessages[0]);\n    } else if (weightInputByCollector < 1) {\n      showMessage(listOfMessages[3]);\n    } else {\n      setRequestingReward(true);\n      showMessage(listOfMessages[1]);\n      // const amountWei = web3.utils.toWei(\"0.001\", \"ether\");\n      await recycleContract.current.methods\n        .requestReward(addressToRequestRewardFor, Math.round(weightInputByCollector))\n        .send({\n          from: collector,\n        });\n      \n      // var statusIndex =\n      //   result.events.LogRecieved.returnValues.statusOfRecyclable;\n\n      // setStatus(statesOfItems[statusIndex]);\n\n      showMessage(listOfMessages[4]);\n\n      setRequestingReward(false);\n    }\n  };\n\n  const handleAdminSubmission = async (event) => {\n    event.preventDefault();\n\n    if (addressToReward === \"\") {\n      showMessage(listOfMessages[0]);\n    } else {\n      setRewardingUser(true);\n      showMessage(listOfMessages[1]);\n      const amountWei = web3.utils.toWei(\"0.002\", \"ether\");\n      await recycleContract.current.methods\n        .awardRecycler(addressToReward)\n        .send({\n          from: admin,\n          value: amountWei,\n        });\n\n      // var statusIndex =\n      //   result.events.LogRewarded.returnValues.statusOfRecyclable;\n\n      // setStatus(statesOfItems[statusIndex]);\n\n      showMessage(listOfMessages[5]);\n\n      setRewardingUser(false);\n    }\n  };\n\n  //\n\n  const checkUserBalance = async () => {\n    var userAdd = await web3.eth.getAccounts();\n    var balance = await web3.eth.getBalance(userAdd[0]);\n    var balanceInEther = web3.utils.fromWei(balance, \"ether\");\n    setBalance(balanceInEther);\n  };\n\n  const showMessage = async (msg) => {\n    setMessage(msg);\n  };\n\n  return (\n    <div className=\"App\">\n      {web3 === null && !doneCheckingForMetaMask && (\n        <div className=\"page-center\">\n          <div className=\"alert info\">\n            <h1 className=\"no-margin-top\">Recycle Contract</h1>\n            <p className=\"no-margin\">\n              Checking for MetaMask Ethereum Provider...\n            </p>\n          </div>\n        </div>\n      )}\n\n      {web3 === null && doneCheckingForMetaMask && (\n        <div className=\"page-center\">\n          <div className=\"alert error\">\n            <h1 className=\"no-margin-top\">Recycle Contract</h1>\n            <p className=\"no-margin\">\n              MetaMask is required to run this app! Please install MetaMask and\n              then refresh this page.\n            </p>\n          </div>\n        </div>\n      )}\n\n      {web3 !== null && doneCheckingForMetaMask && !isRinkebyChain && (\n        <div className=\"page-center\">\n          <div className=\"alert error\">\n            <h1 className=\"no-margin-top\">Recycle Contract</h1>\n            <p className=\"no-margin\">\n              You must be connected to the <strong>Rinkeby test network</strong>{\" \"}\n              for Ether transactions made via this app.\n            </p>\n          </div>\n        </div>\n      )}\n\n      {web3 !== null && !connected && isRinkebyChain && (\n        <div className=\"page-center\">\n          <section className=\"card\">\n            <h1 className=\"no-margin-top\">Recycle Contract</h1>\n            <p>Connect with MetaMask and start recycling!</p>\n            <div className=\"center\">\n              <button\n                className=\"btn primaryBtn\"\n                type=\"button\"\n                onClick={getAccount}\n                disabled={connecting}\n              >\n                Connect with MetaMask\n              </button>\n            </div>\n          </section>\n        </div>\n      )}\n\n      {web3 !== null && connected && isRinkebyChain && (\n        <div className=\"page-center\">\n          <section className=\"card\">\n            <h1 className=\"no-margin-top\">Your Portal to E-waste Recycling</h1>\n            <p>This contract is managed by {admin}.</p>\n            <p>The assigned e-waste collector is {collector}.</p>\n            <div className=\"user-info\">\n              <p>\n                🔐 Your Address is {ethereum.selectedAddress} <br />\n                📩 Your Balance is {userBalance} Ξ\n              </p>\n            </div>\n            {/* <p>Your assigned waste collector is {collector} </p> */}\n\n            {/* <hr className=\"line\"/> */}\n\n            {/* Only recycler fills this form */}\n\n            {admin.toLowerCase() !== ethereum.selectedAddress &&\n              collector.toLowerCase() !== ethereum.selectedAddress && (\n                <div>\n                  <form onSubmit={handleUserSubmission}>\n                    <h4>Want to recycle?</h4>\n                    <div className=\"input-area\">\n                      <label>Enter item description:</label>{\" \"}\n                      <input\n                        value={descp}\n                        onChange={(event) => setDescp(event.target.value)}\n                      />{\" \"}\n                    </div>\n                    <div className=\"input-area\">\n                      <label>Enter city:</label>{\" \"}\n                      {/* <input\n                        value={code}\n                        onChange={(event) => setCode(event.target.value)}\n                        maxLength=\"2\"\n                      />{\" \"} */}\n                      <select name=\"cities\" onChange={handleDropdown}>\n                        <option value=\"DEFAULT\">-- Select an option --</option>\n                        <option value=\"SH\">Sharjah</option>\n                        <option value=\"AJ\">Ajman</option>\n                        <option value=\"DU\">Dubai</option>\n                        <option value=\"AD\">Abu Dhabi</option>\n                        <option value=\"FU\">Fujairah</option>\n                        <option value=\"RK\">Ras Al Khaimah</option>\n                        <option value=\"UQ\">Umm Al Quwain</option>\n                      </select>\n                    </div>\n                    <div className=\"input-area\">\n                      <label>Enter weight (in KGs):</label>{\" \"}\n                      <input\n                        value={weight}\n                        onChange={(event) => setWeight(event.target.value)}\n                      />{\" \"}\n                    </div>\n                    <button\n                      className=\"btn primaryBtn\"\n                      type=\"submit\"\n                      disabled={addingRecyclable}\n                    >\n                      Enter\n                    </button>\n                  </form>\n                </div>\n              )}\n\n            {/* Only collector fills this form */}\n            {collector.toLowerCase() === ethereum.selectedAddress && (\n              <div>\n                <form onSubmit={handleCollectorSubmission}>\n                  <h4>Want to request a reward?</h4>\n                  <div className=\"input-area\">\n                    <label>Enter address to be rewarded:</label>{\" \"}\n                    <input\n                      value={addressToRequestRewardFor}\n                      onChange={(event) =>\n                        setRequestAddress(event.target.value)\n                      }\n                    />{\" \"}\n                  </div>\n                  <div className=\"input-area\">\n                    <label>Enter total weight (in KGs):</label>{\" \"}\n                    <input\n                      value={weightInputByCollector}\n                      onChange={(event) => setweightInputByCollector(event.target.value)}\n                    />{\" \"}\n                  </div>\n                  <div className=\"input-area\">\n                    <button\n                      className=\"btn primaryBtn\"\n                      type=\"submit\"\n                      disabled={requestingReward}\n                    >\n                      Submit Request\n                    </button>\n                  </div>\n                </form>\n              </div>\n            )}\n\n            {/* Only admin fills this form */}\n\n            {admin.toLowerCase() === ethereum.selectedAddress && (\n              <div>\n                <h4>Approve the following request:</h4>\n                <form onSubmit={handleAdminSubmission}>\n                  <h4>Want to reward?</h4>\n                  <div className=\"input-area\">\n                    <label>Enter address to be rewarded:</label>{\" \"}\n                    <input\n                      value={addressToReward}\n                      onChange={(event) => setAddress(event.target.value)}\n                    />{\" \"}\n                  </div>\n                  {/* <div className=\"input-area\">\n                    <label>Enter amount to be rewarded (in Ether):</label>{\" \"}\n                    <input\n                      value={amountToReward}\n                      onChange={(event) => setAmount(event.target.value)}\n                    />{\" \"}\n                  </div> */}\n                  <div className=\"input-area\">\n                    <button\n                      className=\"btn primaryBtn\"\n                      type=\"submit\"\n                      disabled={rewardingUser}\n                    >\n                      Go Forth & Reward\n                    </button>\n                  </div>\n                </form>\n                </div>\n            )}\n\n            <h2>{message}</h2>\n\n            {/** Transaction details for a recycler */}\n            {ethereum.selectedAddress !== admin.toLowerCase() &&\n              ethereum.selectedAddress !== collector.toLowerCase() && (\n                <div className=\"txn-details\">\n                  <div className=\"row\">\n                    <div className=\"column\">\n                      <table>\n                        <caption>🧾👇 Your transaction details:</caption>\n                        <tbody>\n                          <tr>\n                            <th>Description</th>\n                            <th>City</th>\n                            <th>Weight</th>\n                            {/* <th>Status</th> */}\n                            <th>Drop-off Location</th>\n                          </tr>\n                          <tr>\n                            <td>{descp}</td>\n                            <td>{code}</td>\n                            <td>{weight}</td>\n                            {/* <td>{status}</td> */}\n                            <td>{showLocation(code)}</td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n            {/** Transaction details for a collector */}\n            {ethereum.selectedAddress === collector.toLowerCase() && (\n              <div className=\"txn-details\">\n                <div className=\"row\">\n                  <div className=\"column\">\n                    <table>\n                      <caption>🧾👇 Your reward request details:</caption>\n                      <tbody>\n                        <tr>\n                          <th>Recycler's Address</th>\n                          <th>Weight</th>\n                        </tr>\n                        <tr>\n                          <td>{addressToRequestRewardFor}</td>\n                          <td>{weightInputByCollector}</td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            )}\n          </section>\n\n          <footer>&copy; Copyright 2021 E-Recycle</footer>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}